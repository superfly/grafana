// Code generated by mockery v2.12.0. DO NOT EDIT.

package eval

import (
	backend "github.com/grafana/grafana-plugin-sdk-go/backend"
	mock "github.com/stretchr/testify/mock"

	models "github.com/grafana/grafana/pkg/services/ngalert/models"

	testing "testing"
)

// FakeEvaluator is an autogenerated mock type for the Evaluator type
type FakeEvaluator struct {
	mock.Mock
}

type FakeEvaluator_Expecter struct {
	mock *mock.Mock
}

func (_m *FakeEvaluator) EXPECT() *FakeEvaluator_Expecter {
	return &FakeEvaluator_Expecter{mock: &_m.Mock}
}

// ConditionEval provides a mock function with given fields: ctx, condition
func (_m *FakeEvaluator) ConditionEval(ctx EvaluationContext, condition models.Condition) Results {
	ret := _m.Called(ctx, condition)

	var r0 Results
	if rf, ok := ret.Get(0).(func(EvaluationContext, models.Condition) Results); ok {
		r0 = rf(ctx, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Results)
		}
	}

	return r0
}

// FakeEvaluator_ConditionEval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConditionEval'
type FakeEvaluator_ConditionEval_Call struct {
	*mock.Call
}

// ConditionEval is a helper method to define mock.On call
//   - ctx EvaluationContext
//   - condition models.Condition
func (_e *FakeEvaluator_Expecter) ConditionEval(ctx interface{}, condition interface{}) *FakeEvaluator_ConditionEval_Call {
	return &FakeEvaluator_ConditionEval_Call{Call: _e.mock.On("ConditionEval", ctx, condition)}
}

func (_c *FakeEvaluator_ConditionEval_Call) Run(run func(ctx EvaluationContext, condition models.Condition)) *FakeEvaluator_ConditionEval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EvaluationContext), args[1].(models.Condition))
	})
	return _c
}

func (_c *FakeEvaluator_ConditionEval_Call) Return(_a0 Results) *FakeEvaluator_ConditionEval_Call {
	_c.Call.Return(_a0)
	return _c
}

// QueriesAndExpressionsEval provides a mock function with given fields: ctx, data
func (_m *FakeEvaluator) QueriesAndExpressionsEval(ctx EvaluationContext, data []models.AlertQuery) (*backend.QueryDataResponse, error) {
	ret := _m.Called(ctx, data)

	var r0 *backend.QueryDataResponse
	if rf, ok := ret.Get(0).(func(EvaluationContext, []models.AlertQuery) *backend.QueryDataResponse); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.QueryDataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(EvaluationContext, []models.AlertQuery) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FakeEvaluator_QueriesAndExpressionsEval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueriesAndExpressionsEval'
type FakeEvaluator_QueriesAndExpressionsEval_Call struct {
	*mock.Call
}

// QueriesAndExpressionsEval is a helper method to define mock.On call
//   - ctx EvaluationContext
//   - data []models.AlertQuery
func (_e *FakeEvaluator_Expecter) QueriesAndExpressionsEval(ctx interface{}, data interface{}) *FakeEvaluator_QueriesAndExpressionsEval_Call {
	return &FakeEvaluator_QueriesAndExpressionsEval_Call{Call: _e.mock.On("QueriesAndExpressionsEval", ctx, data)}
}

func (_c *FakeEvaluator_QueriesAndExpressionsEval_Call) Run(run func(ctx EvaluationContext, data []models.AlertQuery)) *FakeEvaluator_QueriesAndExpressionsEval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EvaluationContext), args[1].([]models.AlertQuery))
	})
	return _c
}

func (_c *FakeEvaluator_QueriesAndExpressionsEval_Call) Return(_a0 *backend.QueryDataResponse, _a1 error) *FakeEvaluator_QueriesAndExpressionsEval_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Validate provides a mock function with given fields: ctx, condition
func (_m *FakeEvaluator) Validate(ctx EvaluationContext, condition models.Condition) error {
	ret := _m.Called(ctx, condition)

	var r0 error
	if rf, ok := ret.Get(0).(func(EvaluationContext, models.Condition) error); ok {
		r0 = rf(ctx, condition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FakeEvaluator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type FakeEvaluator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx EvaluationContext
//   - condition models.Condition
func (_e *FakeEvaluator_Expecter) Validate(ctx interface{}, condition interface{}) *FakeEvaluator_Validate_Call {
	return &FakeEvaluator_Validate_Call{Call: _e.mock.On("Validate", ctx, condition)}
}

func (_c *FakeEvaluator_Validate_Call) Run(run func(ctx EvaluationContext, condition models.Condition)) *FakeEvaluator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(EvaluationContext), args[1].(models.Condition))
	})
	return _c
}

func (_c *FakeEvaluator_Validate_Call) Return(_a0 error) *FakeEvaluator_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewFakeEvaluator creates a new instance of FakeEvaluator. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeEvaluator(t testing.TB) *FakeEvaluator {
	mock := &FakeEvaluator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
